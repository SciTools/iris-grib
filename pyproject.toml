# See https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
# See https://github.com/SciTools/.github/wiki/Linting for common linter rules

[build-system]
# Defined by PEP 518
requires = [
    "setuptools>=64",
    "setuptools_scm>=8.0",
]
# Defined by PEP 517
build-backend = "setuptools.build_meta"

[project]
authors = [
    {name = "Iris-grib Contributors", email = "scitools.pub@gmail.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: MacOS",
    "Operating System :: POSIX",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: Visualization",
]
description = "Functionality for converting between weather/climate datasets stored as GRIB files and SciTools-Iris Cubes"
dynamic = [
    "dependencies",
    "optional-dependencies",
    "readme",
    "version",
]
keywords = [
    "iris",
    "GRIB",
    "data-analysis",
    "earth-science",
    "meteorology",
]
license = {text = "BSD-3-Clause"}
name = "iris-grib"
requires-python = ">=3.10"

[project.urls]
Code = "https://github.com/SciTools/iris-grib"
Discussions = "https://github.com/SciTools/iris-grib/discussions"
Documentation = "https://iris-grib.readthedocs.io/en/stable/"
Issues = "https://github.com/SciTools/iris-grib/issues"

[tool.setuptools]
license-files = ["LICENSE"]

[tool.setuptools.dynamic]
dependencies = {file = "requirements/pypi-core.txt"}
readme = {file = "README.md", content-type = "text/markdown"}

[tool.setuptools.dynamic.optional-dependencies]
dev = {file = "requirements/pypi-optional-dev.txt"}
test = {file = "requirements/pypi-optional-test.txt"}

[tool.setuptools.packages.find]
include = ["iris_grib*"]
where = ["src"]

[tool.setuptools_scm]
write_to = "src/iris_grib/_version.py"
local_scheme = "dirty-tag"
version_scheme = "release-branch-semver"

#------------------------------------------------------------------------------

[tool.coverage.run]
# See https://coverage.readthedocs.io/en/latest/config.html
branch = true
source = [
    "src/iris_grib",
]
omit = [
    "src/iris_grib/tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:"
]

[tool.codespell]
# See https://github.com/codespell-project/codespell/tree/master?tab=readme-ov-file#using-a-config-file
ignore-words-list = "alpha-numeric,assertIn,degreee,discontiguities,lazyness,meaned,nin"
skip = "./CODE_OF_CONDUCT.md,_build,*.css,*.ipynb,*.js,*.html,*.svg,*.xml,.git,generated"

[tool.check-manifest]
ignore = [
    "src/iris_grib/_version.py",
]

[tool.mypy]
# See https://mypy.readthedocs.io/en/stable/config_file.html

# Extra checks we have chosen to enable.
warn_unused_configs = true
warn_unreachable = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

# Checks we have temporarily *disabled*
# NOTE:
#   * Some of these settings are also disabled by "strict = false"
#   * See "$ mypy --help" for which
#   * Given these settings, "strict = true" generates no errors
# TODO: all of these should eventually be removed
disallow_any_generics = false  # 5 errors
disallow_subclassing_any = false  # 14 errors
disallow_untyped_calls = false  # 8 errors
disallow_untyped_defs = false  # 964 errors
disallow_incomplete_defs = false  # 3 errors
check_untyped_defs = false  # 100 errors
no_implicit_reexport = false  # 134 errors

exclude = [
    'noxfile\.py',
    'docs/conf\.py'
]
strict = true  # Default value, make true when introducing type hinting.

[tool.pytest.ini_options]
# See https://docs.pytest.org/en/stable/reference/customize.html
addopts = [
    "--doctest-continue-on-failure",
    "--doctest-modules",
    "-ra",
    "--strict-config",
    "--strict-markers",
    "-v",
]
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS NUMBER"
# configure settings as recommended by repo-review:
log_cli = "True"
log_cli_level = "INFO"
minversion = "6.0"
testpaths = "src/iris_grib"
xfail_strict = "True"
filterwarnings = ["error"]

[tool.repo-review]
ignore = [
    # https://learn.scientific-python.org/development/guides/style/#PC180
    "PC180",  # Uses prettier
]

[tool.ruff]
# Exclude the following, in addition to the standard set of exclusions.
# https://docs.astral.sh/ruff/settings/#exclude
line-length = 88
src = [
    "src",
    "docs",
]

[tool.ruff.format]
docstring-code-format = true
preview = false

[tool.ruff.lint]
ignore = [
    # The following ruff checks are intended to be *permanently* ignored (by design).
    # NOTE: *temporary* ignores are listed separately, below.

    # flake8-commas (COM)
    # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "COM812",  # Trailing comma missing.
    "COM819",  # Trailing comma prohibited.

    # flake8-implicit-str-concat (ISC)
    # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/
    # NOTE: This rule may cause conflicts when used with "ruff format".
    "ISC001",  # Implicitly concatenate string literals on one line.

    # ==============================================
    # From here on, we list the *temporary* check disables
    # TODO: eventually, remove all these by either
    #   1. fixing all code
    #   2. adding per-occurence ignores (#qa comments) where needed
    #   3. promote the check to the "permanent disables" list above

    # flake8-builtins (A)
    # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "A001",
    "A002",

    # flake8-annotations (ANN)
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN102",
    "ANN201",
    "ANN202",
    "ANN204",
    "ANN205",

    # flake8-unused-arguments (ARG)
    # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "ARG001",
    "ARG002",
    "ARG005",

    # flake8-bugbear (B)
    # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "B007",
    "B018",
    "B028",
    "B904",

    # flake8-blind-except (BLE)
    # https://docs.astral.sh/ruff/rules/#flake8-blind-except-ble
    "BLE001",

    # flake8-comprehensions (C4)
    # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "C408",
    "C901",

    # pydocstyle (D)
    # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D105", # Missing docstring in magic method
    "D200", # One-line docstring should fit on one line
    "D202", # No blank lines allowed after function docstring
    "D205", # 1 blank line required between summary line and description
    "D212", # Multi-line docstring summary should start at the second line
    "D300", # Use triple double quotes """
    "D301", # Use r""" if any backslashes in a docstring
    "D400", # First line should end with a period
    "D401", # First line of docstring should be in imperative mood
    "D406", # Section name should end with a newline
    "D407", # Missing dashed underline after section

    # flake8-datetimez (DTZ)
    # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "DTZ001",
    "DTZ006",

    # flake8-errmsg (EM)
    "EM101",
    "EM102",
    "EM103",

    # eradicate (ERA)
    # https://docs.astral.sh/ruff/rules/#eradicate-era
    "ERA001",

    # flake8-boolean-trap (FBT)
    # https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
    "FBT001",
    "FBT002",
    "FBT003",

    # flake8-fixme (FIX)
    # https://docs.astral.sh/ruff/rules/#flake8-fixme-fix
    "FIX002",
    "FIX003",

    # isort (I)
    # https://docs.astral.sh/ruff/rules/#isort-i
    "I001", # Import block is un-sorted or un-formatted

    # pep8-naming (N)
    # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "N801",
    "N802",
    "N803",
    "N806",
    "N999",

    # Numpy-specific rules (NPY)
    # https://docs.astral.sh/ruff/rules/#numpy-specific-rules-npy
    "NPY002",

    # Perflint (PERF)
    # https://docs.astral.sh/ruff/rules/#perflint-perf
    "PERF203",
    "PERF401",

    # Refactor (R)
    # https://docs.astral.sh/ruff/rules/#refactor-r
    "PLR0402",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PLR1714",
    "PLR2004",
    "PLR5501",

    # Warning (W)
    # https://docs.astral.sh/ruff/rules/#warning-w
    "PLW0602",
    "PLW2901",

    # flake8-pytest-style (PT)
    "PT009",
    "PT027",

    # flake8-use-pathlib (PTH)
    # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "PTH100",
    "PTH107",
    "PTH110",
    "PTH111",
    "PTH112",
    "PTH113",
    "PTH118",
    "PTH120",
    "PTH122",
    "PTH123",

    # flake8-pyi (PYI)
    # https://docs.astral.sh/ruff/rules/#flake8-pyi-pyi
    "PYI024",

    # flake8-return (RET)
    # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "RET503",
    "RET504",
    "RET505",
    "RET506",

    # flake8-raise (RSE)
    # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RSE102",

    # Ruff-specific rules (RUF)
    # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "RUF005",
    "RUF012",
    "RUF015",

    # flake8-bandit (S)
    # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "S101",
    "S110",
    "S603",
    "S607",

    # flake8-simplify (SIM)
    # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SIM102",
    "SIM108",
    "SIM115",
    "SIM117",
    "SIM118",

    # flake8-self (SLF)
    # https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SLF001",

    # flake8-print (T20)
    # https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "T201",

    # flake8-todos (TD)
    # https://docs.astral.sh/ruff/rules/#flake8-todos-td
    "TD001",
    "TD002",
    "TD003",
    "TD004",
    "TD005",
    "TD006",

    # tryceratops (TRY)
    # https://docs.astral.sh/ruff/rules/#tryceratops-try
    "TRY003",
    "TRY004",
    "TRY301",

    # pyupgrade (UP)
    # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "UP009",
    "UP018",
    "UP027",
    "UP031",
    "UP032",
    ]
preview = false
select = [
    "ALL",

    # Note: the above "all" disables conflicting rules, if you want that
    # rule it needs to be explicitly enabled below:
    "D212",  # conflicts with D213 : this one is our choice, so enforce it
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["iris_grib"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.numpydoc_validation]
checks = [
    "all",  # Enable all numpydoc validation rules, apart from the following:

    # -> Docstring text (summary) should start in the line immediately
    #    after the opening quotes (not in the same line, or leaving a
    #    blank line in between)
    "GL01",  # Permit summary line on same line as docstring opening quotes.

    # -> Closing quotes should be placed in the line after the last text
    #    in the docstring (do not close the quotes in the same line as
    #    the text, or leave a blank line between the last text and the
    #    quotes)
    "GL02",  # Permit a blank line before docstring closing quotes.

    # -> Double line break found; please use only one blank line to
    #    separate sections or paragraphs, and do not leave blank lines
    #    at the end of docstrings
    "GL03",  # Ignoring.

    # -> See Also section not found
    "SA01",  # Not all docstrings require a "See Also" section.

    # -> No extended summary found
    "ES01",  # Not all docstrings require an "Extended Summary" section.

    # -> No examples section found
    "EX01",  # Not all docstrings require an "Examples" section.

    # -> No Yields section found
    "YD01",  # Not all docstrings require a "Yields" section.

    # Record temporarily ignored checks below; will be reviewed at a later date:
    # TODO: work to remove these at a later date.
    "GL08",  # *975    The object does not have a docstring
    "PR01",  # *149    Parameters ... not documented
    "RT01",  # *9      No Returns section found
]
exclude = [
    '\.__eq__$',
    '\.__ne__$',
    '\.__repr__$',
]
